import blockchain;
import godwoken;
import store;

vector Byte32VecVec <Byte32Vec>;
option Byte32VecVecOpt (Byte32VecVec);

table CellInfo {
    out_point: OutPoint,
    output: CellOutput,
    data: Bytes,
}

table DepositInfo {
    request: DepositRequest,
    cell: CellInfo,
}

vector DepositInfoVec <DepositInfo>;
option Byte32Opt (Byte32);

table SudtCustodian {
    script_hash: Byte32,
    amount: Uint128,
    script: Script,
}

vector SudtCustodianVec <SudtCustodian>;

table FinalizedCustodianCapacity {
    capacity: Uint128,
    sudt: SudtCustodianVec,
}

// Ensure that from_block_number <= to_block_number
//
// This represents a block number range `(from_block_number, to_block_number]`:
//   - when from_block_number < to_block_number, blocks {from_block_number+1, from_block_number+2, ..., to_block_number} are finalizing;
//   - when from_block_number = to_block_number, no any blocks are finalizing
struct FinalizingRange {
    from_block_number: Uint64,
    to_block_number: Uint64,
}

vector AccountMerkleStateVec <AccountMerkleState>;

table CompactMemBlock {
    txs: Byte32Vec,
    withdrawals: Byte32Vec,
    deposits: DepositInfoVec,
}

table MemBlock {
    block_producer: Bytes,
    txs: Byte32Vec,
    withdrawals: Byte32Vec,
    finalized_custodians: FinalizedCustodianCapacity,
    deposits: DepositInfoVec,
    state_checkpoints: Byte32Vec,
    txs_prev_state_checkpoint: Byte32Opt,
    block_info: BlockInfo,
    prev_merkle_state: AccountMerkleState,
    touched_keys: Byte32Vec,
}

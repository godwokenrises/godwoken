// Generated by Molecule 0.6.1

use super::blockchain::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct PoAData(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for PoAData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for PoAData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for PoAData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(
            f,
            "{}: {}",
            "round_initial_subtime",
            self.round_initial_subtime()
        )?;
        write!(f, ", {}: {}", "subblock_subtime", self.subblock_subtime())?;
        write!(f, ", {}: {}", "subblock_index", self.subblock_index())?;
        write!(
            f,
            ", {}: {}",
            "block_producer_index",
            self.block_producer_index()
        )?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for PoAData {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ];
        PoAData::new_unchecked(v.into())
    }
}
impl PoAData {
    pub const TOTAL_SIZE: usize = 22;
    pub const FIELD_SIZES: [usize; 4] = [8, 8, 4, 2];
    pub const FIELD_COUNT: usize = 4;
    pub fn round_initial_subtime(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(0..8))
    }
    pub fn subblock_subtime(&self) -> Uint64 {
        Uint64::new_unchecked(self.0.slice(8..16))
    }
    pub fn subblock_index(&self) -> Uint32 {
        Uint32::new_unchecked(self.0.slice(16..20))
    }
    pub fn block_producer_index(&self) -> Uint16 {
        Uint16::new_unchecked(self.0.slice(20..22))
    }
    pub fn as_reader<'r>(&'r self) -> PoADataReader<'r> {
        PoADataReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for PoAData {
    type Builder = PoADataBuilder;
    const NAME: &'static str = "PoAData";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        PoAData(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        PoADataReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        PoADataReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .round_initial_subtime(self.round_initial_subtime())
            .subblock_subtime(self.subblock_subtime())
            .subblock_index(self.subblock_index())
            .block_producer_index(self.block_producer_index())
    }
}
#[derive(Clone, Copy)]
pub struct PoADataReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for PoADataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for PoADataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for PoADataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(
            f,
            "{}: {}",
            "round_initial_subtime",
            self.round_initial_subtime()
        )?;
        write!(f, ", {}: {}", "subblock_subtime", self.subblock_subtime())?;
        write!(f, ", {}: {}", "subblock_index", self.subblock_index())?;
        write!(
            f,
            ", {}: {}",
            "block_producer_index",
            self.block_producer_index()
        )?;
        write!(f, " }}")
    }
}
impl<'r> PoADataReader<'r> {
    pub const TOTAL_SIZE: usize = 22;
    pub const FIELD_SIZES: [usize; 4] = [8, 8, 4, 2];
    pub const FIELD_COUNT: usize = 4;
    pub fn round_initial_subtime(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[0..8])
    }
    pub fn subblock_subtime(&self) -> Uint64Reader<'r> {
        Uint64Reader::new_unchecked(&self.as_slice()[8..16])
    }
    pub fn subblock_index(&self) -> Uint32Reader<'r> {
        Uint32Reader::new_unchecked(&self.as_slice()[16..20])
    }
    pub fn block_producer_index(&self) -> Uint16Reader<'r> {
        Uint16Reader::new_unchecked(&self.as_slice()[20..22])
    }
}
impl<'r> molecule::prelude::Reader<'r> for PoADataReader<'r> {
    type Entity = PoAData;
    const NAME: &'static str = "PoADataReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        PoADataReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct PoADataBuilder {
    pub(crate) round_initial_subtime: Uint64,
    pub(crate) subblock_subtime: Uint64,
    pub(crate) subblock_index: Uint32,
    pub(crate) block_producer_index: Uint16,
}
impl PoADataBuilder {
    pub const TOTAL_SIZE: usize = 22;
    pub const FIELD_SIZES: [usize; 4] = [8, 8, 4, 2];
    pub const FIELD_COUNT: usize = 4;
    pub fn round_initial_subtime(mut self, v: Uint64) -> Self {
        self.round_initial_subtime = v;
        self
    }
    pub fn subblock_subtime(mut self, v: Uint64) -> Self {
        self.subblock_subtime = v;
        self
    }
    pub fn subblock_index(mut self, v: Uint32) -> Self {
        self.subblock_index = v;
        self
    }
    pub fn block_producer_index(mut self, v: Uint16) -> Self {
        self.block_producer_index = v;
        self
    }
}
impl molecule::prelude::Builder for PoADataBuilder {
    type Entity = PoAData;
    const NAME: &'static str = "PoADataBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: ::molecule::io::Write>(&self, writer: &mut W) -> ::molecule::io::Result<()> {
        writer.write_all(self.round_initial_subtime.as_slice())?;
        writer.write_all(self.subblock_subtime.as_slice())?;
        writer.write_all(self.subblock_index.as_slice())?;
        writer.write_all(self.block_producer_index.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        PoAData::new_unchecked(inner.into())
    }
}
